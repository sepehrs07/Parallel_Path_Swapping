/* ----------------------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under 
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */
#include "stdio.h"
#include "string.h"
#include "fix_nve.h"
#include "atom.h"
#include "force.h"
#include "update.h"
#include "respa.h"
#include "error.h"
#include "iostream.h"
#include "fstream.h"
#include "math.h"
#include "random_mars.h"
#include "iomanip.h"
#include "universe.h"

#define MIN(a,b) ((a) < (b) ? (a) : (b))
#define MAX(a,b) ((a) > (b) ? (a) : (b))

using namespace LAMMPS_NS;


/* ---------------------------------------------------------------------- */

FixNVE::FixNVE(LAMMPS *lmp, int narg, char **arg) :
  Fix(lmp, narg, arg)
{
  if (narg != 3) error->all("Illegal fix nve command");
}

/* ---------------------------------------------------------------------- */

int FixNVE::setmask()
{
  int mask = 0;
  mask |= INITIAL_INTEGRATE;
  mask |= FINAL_INTEGRATE;
  mask |= INITIAL_INTEGRATE_RESPA;
  mask |= FINAL_INTEGRATE_RESPA;
  return mask;
}

/* ---------------------------------------------------------------------- */

void FixNVE::init()
{
  dtv = update->dt;
  dtf = update->dt * force->ftm2v;

  if (strcmp(update->integrate_style,"respa") == 0)
    step_respa = ((Respa *) update->integrate)->step;
}


 /* FTS variables */
 static int    pmf_call_counter=0;
 static int    constraint;
 static double cosine;
 static double xlo, xhi, ylo, yhi, zlo, zhi;
 static double BL[3], orig_com[3], com[3], prism[3];

 static double       str_x[500000*3];
 static double    left_nb1[500000*3];
 static double    left_nb2[500000*3];
 static double    left_nb3[500000*3];
 static double    left_nb4[500000*3];
 static double   right_nb1[500000*3];
 static double   right_nb2[500000*3];
 static double   right_nb3[500000*3];
 static double   right_nb4[500000*3];

 static double     pmf_vec[500000*3];
// static double    left_vec[500000*3];
// static double   right_vec[500000*3]; 

 static double     temp_add_force[500000][3];
 static double     add_force[500000];
 static double     atom_mass[500000];
 static double     sample_mass;


 static double     old_x[500000][3];
 static double      uw_x[500000][3];
 static double   trial_x[500000][3];
 static double   trial_v[500000][3];
 static double    orig_x[500000][3];
 static double     ave_x[500000][3];

 static double ave_pforce;
 static double pmf_dist;
 static double pmf_force_scaler=0, last_scaler;
 static double pmf_drift_correct,pmf_vec_org;
 static double orig_string_length=1.0e+10;
 static double pmf_vec_length, pmf_vec_length_TOTAL, pmf_v_l_total;
 double rand_U1, rand_U2, rand_G;

 static double delta_tao=0.1;
 static double delta_t=0.01;
 
 static int NN=60;
 static int me_flux[60];

 static int    total_run=1000000;
 static int     MD_start=1000000;
 static int     dump_img=100000;
 static int  dump_matrix=10000;
 static int   dump_force=1;
 static int dump_spacing=1000;

/* ----------------------------------------------------------------------
   allow for both per-type and per-atom mass
------------------------------------------------------------------------- */

void FixNVE::initial_integrate(int vflag)
{

  /* PMF variables */

  static int nb_cnt=4;
  double vor_dist[2*nb_cnt+1];

  double temp, temp1, trash, x_scaler=0;
  double accel;
  int pcheck, reparam_flag; 
  double distance, project_length, vor_check;
  int i, j, k, m, q;
  int lj_marker, rand_index;
  double lnhuge=1e+30;
  double lj, kn, bb;
  double img_spacing, string_length, min_length;
  double pforce_dot_prod, temp_pforce;

  double *nb1_l_x;
  double *nb2_l_x;
  double *nb3_l_x;
  double *nb4_l_x;
  double *nb1_r_x;
  double *nb2_r_x;
  double *nb3_r_x;
  double *nb4_r_x;
  double *force_center;
  double *force_left;

  double work_done[NN], length_along_line[NN], g1_spacing[NN], g2_spacing[NN], g_ave_pforce[NN];    //-NN
  int g_marker[NN];                                                                             //-NN

  /*-----------------*/

  double dtfm;
  double **x = atom->x;
  double **v = atom->v;
  double **f = atom->f;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;

  MPI_Status status;
  int me;
  MPI_Comm_rank(universe->uworld, &me);

//  random = new RanMars(lmp,384527 + me);
 
  /*------------- First step:  read box sizes, set constraint on/off, and unwrap periodic coords to match inital state (0) ------------*/
    if(pmf_call_counter==0){
      /* read if constraint is on/off and box sizes */
      ifstream vector("pos.read");
      vector>>xlo>>xhi;
      vector>>ylo>>yhi;
      vector>>zlo>>zhi;
      vector>>sample_mass;
      for(i=0;i<nlocal;i++)  vector>>trash>>atom_mass[i]>>add_force[i];      // for adding force
      vector.close();
      BL[0] = xhi-xlo;
      BL[1] = yhi-ylo;
      BL[2] = zhi-zlo;
#if 0
      for (int j=0; j<nlocal; j++)  {
        temp_add_force[j][0]=-add_force[j];
        temp_add_force[j][1]=0.0;
        temp_add_force[j][2]=0.0;
      }
#endif
      /* assign images to nodes */
      char buf[128];
      sprintf(buf,"R%d.data",me);
      ifstream indata (buf);
      indata>>trash>>orig_com[0]>>orig_com[1]>>orig_com[2];
      for(i=0;i<nlocal;i++)   indata>>trash>>uw_x[i][0]>>uw_x[i][1]>>uw_x[i][2];
      indata.close();

      for(i=0;i<nlocal;i++) for(k=0;k<3;k++) { old_x[i][k] = orig_x[i][k] = x[i][k]; }
      for(i=0;i<nlocal;i++) for(k=0;k<3;k++) { v[i][k] = 0.0; }

      /* initiate rejection counter */
      for(m=0;m<NN;m++) me_flux[m]=0;

    }


  /*------------------------------------------------------- For all steps ----------------------------------------------------------*/

  if(pmf_call_counter>0){

    if(pmf_call_counter==1) {

      // periodicity in x
      for (i=0;i<nlocal;i++) {
        temp=x[i][0]-orig_x[i][0];
        if (temp>BL[0]*0.8)  { temp -= BL[0];
        } else if(-temp>BL[0]*0.8) { temp += BL[0]; }
        x[i][0] = temp + orig_x[i][0];
      }
      // periodicity in z
      for (i=0;i<nlocal;i++) {
        temp=x[i][2]-orig_x[i][2];
        if (temp>BL[2]*0.8)  { temp -= BL[2];
        } else if(-temp>BL[2]*0.8) { temp += BL[2]; }
        x[i][2] = temp + orig_x[i][2];
      }
      for(i=0;i<nlocal;i++) for(k=0;k<3;k++) orig_x[i][k] = x[i][k];
      for(k=0;k<3;k++) {
        orig_com[k]=0.0;
        for(i=0;i<nlocal;i++)    orig_com[k] += orig_x[i][k]*atom_mass[i];
        orig_com[k] /= sample_mass;
      }

      for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)  { str_x[3*i+k] = ave_x[i][k] = x[i][k]; }

      /*Swapping string coords before convergence*/

      // send to +4; receive from -4
      nb4_l_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me<4) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me+4, me+4, universe->uworld);
      }else{
        if (me>NN-(4+1)) MPI_Recv(nb4_l_x, 3*nlocal, MPI_DOUBLE, me-4, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me+4, me+4, nb4_l_x, 3*nlocal, MPI_DOUBLE, me-4, me, universe->uworld, &status);
      }
      // send to -4; receive from +4
      nb4_r_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me>NN-(4+1)) { 
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me-4, me-4, universe->uworld);
      }else{
        if (me<4) MPI_Recv(nb4_r_x, 3*nlocal, MPI_DOUBLE, me+4, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me-4, me-4, nb4_r_x, 3*nlocal, MPI_DOUBLE, me+4, me, universe->uworld, &status);
      }

      // send to +3; receive from -3
      nb3_l_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me<3) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me+3, me+3, universe->uworld);
      }else{
        if (me>NN-(3+1)) MPI_Recv(nb3_l_x, 3*nlocal, MPI_DOUBLE, me-3, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me+3, me+3, nb3_l_x, 3*nlocal, MPI_DOUBLE, me-3, me, universe->uworld, &status);
      }
      // send to -3; receive from +3
      nb3_r_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me>NN-(3+1)) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me-3, me-3, universe->uworld);
      }else{
        if (me<3) MPI_Recv(nb3_r_x, 3*nlocal, MPI_DOUBLE, me+3, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me-3, me-3, nb3_r_x, 3*nlocal, MPI_DOUBLE, me+3, me, universe->uworld, &status);
      }

      // send to +2; receive from -2
      nb2_l_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me<2) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me+2, me+2, universe->uworld);
      }else{
        if (me>NN-(2+1)) MPI_Recv(nb2_l_x, 3*nlocal, MPI_DOUBLE, me-2, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me+2, me+2, nb2_l_x, 3*nlocal, MPI_DOUBLE, me-2, me, universe->uworld, &status);
      }
      // send to -2; receive from +2
      nb2_r_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me>NN-(2+1)) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me-2, me-2, universe->uworld);
      }else{
        if (me<2) MPI_Recv(nb2_r_x, 3*nlocal, MPI_DOUBLE, me+2, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me-2, me-2, nb2_r_x, 3*nlocal, MPI_DOUBLE, me+2, me, universe->uworld, &status);
      }

      // send to +1; receive from -1
      nb1_l_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me<1) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me+1, me+1, universe->uworld);
      }else{
        if (me>NN-(1+1)) MPI_Recv(nb1_l_x, 3*nlocal, MPI_DOUBLE, me-1, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me+1, me+1, nb1_l_x, 3*nlocal, MPI_DOUBLE, me-1, me, universe->uworld, &status);
      }
      // send to -1; receive from +1
      nb1_r_x = new double [3*nlocal];
      MPI_Barrier (universe->uworld);
      if (me>NN-(1+1)) {
        MPI_Send(str_x, 3*nlocal, MPI_DOUBLE, me-1, me-1, universe->uworld);
      }else{
        if (me<1) MPI_Recv(nb1_r_x, 3*nlocal, MPI_DOUBLE, me+1, me, universe->uworld, &status);
        else MPI_Sendrecv(str_x, 3*nlocal, MPI_DOUBLE, me-1, me-1, nb1_r_x, 3*nlocal, MPI_DOUBLE, me+1, me, universe->uworld, &status);
      }

      // set fixed string vectors
      if (me>3)      { for(i=0;i<nlocal;i++) for(k=0;k<3;k++)  left_nb4[3*i+k]=nb4_l_x[3*i+k]; }
      if (me<NN-4)   { for(i=0;i<nlocal;i++) for(k=0;k<3;k++) right_nb4[3*i+k]=nb4_r_x[3*i+k]; }
      if (me>2)      { for(i=0;i<nlocal;i++) for(k=0;k<3;k++)  left_nb3[3*i+k]=nb3_l_x[3*i+k]; }
      if (me<NN-3)   { for(i=0;i<nlocal;i++) for(k=0;k<3;k++) right_nb3[3*i+k]=nb3_r_x[3*i+k]; }
      if (me>1)      { for(i=0;i<nlocal;i++) for(k=0;k<3;k++)  left_nb2[3*i+k]=nb2_l_x[3*i+k]; }
      if (me<NN-2)   { for(i=0;i<nlocal;i++) for(k=0;k<3;k++) right_nb2[3*i+k]=nb2_r_x[3*i+k]; }
      if (me>0)      { for(i=0;i<nlocal;i++) for(k=0;k<3;k++)  left_nb1[3*i+k]=nb1_l_x[3*i+k]; }
      if (me<NN-1)   { for(i=0;i<nlocal;i++) for(k=0;k<3;k++) right_nb1[3*i+k]=nb1_r_x[3*i+k]; }
      delete [] nb1_l_x;
      delete [] nb2_l_x;
      delete [] nb3_l_x;
      delete [] nb4_l_x;
      delete [] nb1_r_x;
      delete [] nb2_r_x;
      delete [] nb3_r_x;
      delete [] nb4_r_x;

    }                               //-------------------- End of swapping string coords after convergence


    /* change from updated x to unwrapped coordinates (to match inital state) */
    // periodicity in x
    for (i=0;i<nlocal;i++) {
      temp=x[i][0]-orig_x[i][0];
      if (temp>BL[0]*0.8)  { temp -= BL[0];
      } else if(-temp>BL[0]*0.8) { temp += BL[0]; }
      uw_x[i][0] = temp + orig_x[i][0];
    }
    // periodicity in z
    for (i=0;i<nlocal;i++) {
      temp=x[i][2]-orig_x[i][2];
      if (temp>BL[2]*0.8)  { temp -= BL[2];
      } else if(-temp>BL[2]*0.8) { temp += BL[2]; }
      uw_x[i][2] = temp + orig_x[i][2];
    }
    // free in y
    for (i=0;i<nlocal;i++)   uw_x[i][1] = x[i][1];

    for(i=0;i<nlocal;i++)   for(k=0;k<3;k++)   trial_x[i][k] = uw_x[i][k];

#if 0
    /* Step 1: Propose new uw_x and check with Voronoi cell to update wu_x */
      // Numerical sampling
      for(j=0;j<me+1;j++)  { rand_U1 = (double)rand(); rand_U2 = (double)rand(); }
      for(i=0;i<nlocal;i++) {
        for(k=0;k<3;k++) {
          rand_U1 = (double)rand()/(double)RAND_MAX;
          rand_U2 = (double)rand()/(double)RAND_MAX;
          if (rand_U1>1e-30)   rand_G=sqrt(-2*log(rand_U1))*cos(2*3.14159*rand_U2);
          else  rand_G=0.0;
          trial_x[i][k] = uw_x[i][k] + delta_t*f[i][k] + sqrt(2*0.02585*delta_t)*rand_G;
        }
      }
#endif
#if 0
      // MD sampling
      if (rmass) { 
        for (i=0; i<nlocal; i++) {
          if (mask[i] & groupbit) {
            dtfm = dtf / rmass[i];
            trial_v[i][0] = v[i][0] + dtfm*f[i][0];
            trial_v[i][1] = v[i][1] + dtfm*f[i][1];
            trial_v[i][2] = v[i][2] + dtfm*f[i][2];
            trial_x[i][0] = uw_x[i][0] + dtv*trial_v[i][0];
            trial_x[i][1] = uw_x[i][1] + dtv*trial_v[i][1];
            trial_x[i][2] = uw_x[i][2] + dtv*trial_v[i][2];
          }
        }
      } else {
        for (i=0; i<nlocal; i++) {
          if (mask[i] & groupbit) {
            dtfm = dtf / mass[type[i]];
            trial_v[i][0] = v[i][0] + dtfm*f[i][0];
            trial_v[i][1] = v[i][1] + dtfm*f[i][1];
            trial_v[i][2] = v[i][2] + dtfm*f[i][2];
            trial_x[i][0] = uw_x[i][0] + dtv*trial_v[i][0];
            trial_x[i][1] = uw_x[i][1] + dtv*trial_v[i][1];
            trial_x[i][2] = uw_x[i][2] + dtv*trial_v[i][2];
          }
        }
      } 
  #endif  

    /* COM correction */
//      for(k=0;k<3;k++) {
//        com[k]=0.0;
//        for(i=0;i<nlocal;i++)    com[k] += trial_x[i][k]*atom_mass[i];
//        com[k] /= sample_mass;
//      }
//      for(i=0;i<nlocal;i++)   for(k=0;k<3;k++)   trial_x[i][k]-=(com[k]-orig_com[k]);


    /* distance to the center Voronoi cell */

      for(m=0;m<(2*nb_cnt+1);m++)   vor_dist[m]=0.0;

      vor_dist[0+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++) {
          for(k=0;k<3;k++) {
            temp = trial_x[i][k] - str_x[3*i+k];
            vor_dist[0+nb_cnt] += temp*temp;
          }
        }
      vor_dist[0+nb_cnt]=sqrt(vor_dist[0+nb_cnt]);

    /* calculating distances to Voronoid cells */

      // distance from neighbor -4
      if (me<4) { vor_dist[-4+nb_cnt] = lnhuge;
      }else{
        vor_dist[-4+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - left_nb4[3*i+k]; vor_dist[-4+nb_cnt] += temp*temp; }
        vor_dist[-4+nb_cnt]=sqrt(vor_dist[-4+nb_cnt]);
      }
      // distance from neighbor +4
      if (me>NN-(4+1)) { vor_dist[4+nb_cnt] = lnhuge;
      }else{
        vor_dist[4+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - right_nb4[3*i+k]; vor_dist[4+nb_cnt] += temp*temp; }
        vor_dist[4+nb_cnt]=sqrt(vor_dist[4+nb_cnt]);
      }

      // distance from neighbor -3
      if (me<3) { vor_dist[-3+nb_cnt] = lnhuge;
      }else{
        vor_dist[-3+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - left_nb3[3*i+k]; vor_dist[-3+nb_cnt] += temp*temp; }
        vor_dist[-3+nb_cnt]=sqrt(vor_dist[-3+nb_cnt]);
      }
      // distance from neighbor +3
      if (me>NN-(3+1)) { vor_dist[3+nb_cnt] = lnhuge;
      }else{
        vor_dist[3+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - right_nb3[3*i+k]; vor_dist[3+nb_cnt] += temp*temp; }
        vor_dist[3+nb_cnt]=sqrt(vor_dist[3+nb_cnt]);
      }

      // distance from neighbor -2
      if (me<2) { vor_dist[-2+nb_cnt] = lnhuge;
      }else{
        vor_dist[-2+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - left_nb2[3*i+k]; vor_dist[-2+nb_cnt] += temp*temp; }
        vor_dist[-2+nb_cnt]=sqrt(vor_dist[-2+nb_cnt]);
      }
      // distance from neighbor +2
      if (me>NN-(2+1)) { vor_dist[2+nb_cnt] = lnhuge;
      }else{
        vor_dist[2+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - right_nb2[3*i+k]; vor_dist[2+nb_cnt] += temp*temp; }
        vor_dist[2+nb_cnt]=sqrt(vor_dist[2+nb_cnt]);
      }

      // distance from neighbor -1
      if (me<1) { vor_dist[-1+nb_cnt] = lnhuge;
      }else{
        vor_dist[-1+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - left_nb1[3*i+k]; vor_dist[-1+nb_cnt] += temp*temp; }
        vor_dist[-1+nb_cnt]=sqrt(vor_dist[-1+nb_cnt]);
      }
      // distance from neighbor +1
      if (me>NN-(1+1)) { vor_dist[1+nb_cnt] = lnhuge;
      }else{
        vor_dist[1+nb_cnt]=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = trial_x[i][k] - right_nb1[3*i+k]; vor_dist[1+nb_cnt] += temp*temp; }
        vor_dist[1+nb_cnt]=sqrt(vor_dist[1+nb_cnt]);
      }

    // find minimum distance to check with Voronoid cells
    vor_check = vor_dist[0];
    for(m=1;m<(2*nb_cnt+1);m++)  vor_check = MIN(vor_check,vor_dist[m]);


    if (pmf_call_counter==1) {

      // calculate image spacing
      if (me==0) {
        img_spacing=0.0;
      }else{
        img_spacing=0.0;
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)   { temp = str_x[3*i+k] - left_nb1[3*i+k]; img_spacing += temp*temp; }
        img_spacing = sqrt(img_spacing);
      }

      MPI_Barrier (universe->uworld);
      MPI_Allgather(&img_spacing, 1, MPI_DOUBLE, g1_spacing, 1, MPI_DOUBLE, universe->uworld);
      length_along_line[0]=0.0;
      for(j=1;j<NN;j++)   length_along_line[j] = g1_spacing[j] + length_along_line[j-1];
      string_length=length_along_line[NN-1];
      if(pmf_call_counter==0) orig_string_length=string_length;

      // print out image spacing and string length
      if (me==0) {
        cout<<endl;
        cout<<"Step: "<<pmf_call_counter<<endl;
        cout<<"String length: "<<string_length/orig_string_length<<"     real length: "<<string_length<<endl;
        for(j=0;j<NN;j++)  cout<<j<<"  image spacing: "<<g1_spacing[j]<<endl;
      }

      // create normalized pmf vector
      if (me==0) {
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)  { pmf_vec[3*i+k] = 0.0; }
      }else{
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)  { pmf_vec[3*i+k] = str_x[3*i+k] - left_nb1[3*i+k]; }
      }

    }

    if(pmf_call_counter==dump_force){

      // send to +1; receive from -1
      force_left = new double [3*nlocal];
      force_center = new double [3*nlocal];
      for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)    force_center[3*i+k] = f[i][k];
      MPI_Barrier (universe->uworld);
      if (me<1) {
        MPI_Send(force_center, 3*nlocal, MPI_DOUBLE, me+1, me+1, universe->uworld);
      }else{
        if (me>NN-(1+1)) MPI_Recv(force_left, 3*nlocal, MPI_DOUBLE, me-1, me, universe->uworld, &status);
        else MPI_Sendrecv(force_center, 3*nlocal, MPI_DOUBLE, me+1, me+1, force_left, 3*nlocal, MPI_DOUBLE, me-1, me, universe->uworld, &status);
      }
      MPI_Barrier (universe->uworld);

      if (me==0) {
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)  { force_center[3*i+k] = 0.0; }
      }else{
        for(i=0;i<nlocal;i++)  for(k=0;k<3;k++)  { force_center[3*i+k] = 0.5*(force_center[3*i+k] + force_left[3*i+k]); }
      }

    }

    // calculate and print mean force on string --- after convergence
    if(pmf_call_counter==dump_force){

      pforce_dot_prod=0.0;
      for(i=0;i<nlocal;i++)   for(k=0;k<3;k++)  { pforce_dot_prod += pmf_vec[3*i+k]*force_center[3*i+k]; }
//      for(i=0;i<nlocal;i++)   for(k=0;k<3;k++)  { pforce_dot_prod += pmf_vec[3*i+k]*temp_add_force[i][k]; }
      temp_pforce = pforce_dot_prod;

      MPI_Barrier (universe->uworld);
      MPI_Gather(&temp_pforce, 1, MPI_DOUBLE, g_ave_pforce, 1, MPI_DOUBLE, 0, universe->uworld);

      // printing
      if (me==0) {
        work_done[0] = g_ave_pforce[0];
        for(j=1;j<NN;j++)   work_done[j] = work_done[j-1] - g_ave_pforce[j];
        char buf[256];
        sprintf(buf,"pmf_step0.%d",pmf_call_counter);
        ofstream outdata (buf);
        outdata<<"Step: "<<pmf_call_counter<<endl;
        for(j=0;j<NN;j++)  outdata<<work_done[j]<<endl;
        outdata.close();
        for(j=0;j<NN;j++)  cout<<j<<"   cell-wise_pmf_force: "<<g_ave_pforce[j]<<endl;
      }

    }

  }

    /* ----------update wrapped coordinates used outside of this routine--------------- */

    /* allow both end states to move */
       for(i=0;i<nlocal;i++) for(k=0;k<3;k++)  x[i][k] += (uw_x[i][k]-old_x[i][k]);

}


//*************** I didn't change anything below this point -Kris
/* ---------------------------------------------------------------------- */
void FixNVE::final_integrate()
{
  double dtfm; 

  double **v = atom->v;
  double **f = atom->f; 
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal; 

  /* pmf variables */
  double f_scaler=0;
  static double pmf_printed=0;
  double tmag, tscaler;
  static double thermterm=0;
  int k, i;
   
  /* compute pmf force for step n+1 */
  dtfm = dtf / mass[type[0]];
 // pmf_force_scaler-=x_scaler/(dtfm*dtv*2);

if (pmf_call_counter>=MD_start) {
  if (rmass) {
    for (int i = 0; i < nlocal; i++) {
      if (mask[i] & groupbit) {
        dtfm = dtf / rmass[i];
        v[i][0] += dtfm * f[i][0];
        v[i][1] += dtfm * f[i][1];
        v[i][2] += dtfm * f[i][2];
      }
    }

  } else {
    for (int i = 0; i < nlocal; i++) {
      if (mask[i] & groupbit) {
        dtfm = dtf / mass[type[i]];
        v[i][0] += dtfm * f[i][0];
        v[i][1] += dtfm * f[i][1];
        v[i][2] += dtfm * f[i][2];
      }
    }
  }
}

/* note I believe that the below commented section should be turned on for
temperatures greater than zero.  However, when turning it on we get unrealistic forces. Without, things seem to work OK.
General PMF theory makes me think it should be on while a targeted MD paper may suggest other wise */
#if 0
   /* compute temperature */
   tscaler=0.0;
   if (rmass) {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        tscaler += (v[i][0]*v[i][0] + v[i][1]*v[i][1] + v[i][2]*v[i][2]) * rmass[i];
  } else {
    for (int i = 0; i < nlocal; i++)
      if (mask[i] & groupbit)
        tscaler += (v[i][0]*v[i][0] + v[i][1]*v[i][1] + v[i][2]*v[i][2]) *
          mass[type[i]];
  }
  tscaler*=1.0364269e-4/(3.0*8.617343e-5*nlocal);
  
   /* adjust pmf force for polare coordinates */
   thermterm-=tscaler*8.617343e-5/pmf_vec_length*(nlocal*3-4);
   pmf_force_scaler-=tscaler*8.617343e-5/pmf_vec_length*(nlocal*3-4);
#endif

  pmf_call_counter += 1;

}

/* ---------------------------------------------------------------------- */

void FixNVE::initial_integrate_respa(int vflag, int ilevel, int flag)
{
  if (flag) return;             // only used by NPT,NPH

  dtv = step_respa[ilevel];
  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;

  if (ilevel == 0) initial_integrate(vflag);
  else final_integrate();
}

/* ---------------------------------------------------------------------- */

void FixNVE::final_integrate_respa(int ilevel)
{
  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;
  final_integrate();
}

/* ---------------------------------------------------------------------- */

void FixNVE::reset_dt()
{
  dtv = update->dt;
  dtf = 0.5 * update->dt * force->ftm2v;
  //dtq = 0.5 * update->dt;
}
