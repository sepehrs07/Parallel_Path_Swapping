/* ----------------------------------------------------------------------
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   Copyright (2003) Sandia Corporation.  Under the terms of Contract
   DE-AC04-94AL85000 with Sandia Corporation, the U.S. Government retains
   certain rights in this software.  This software is distributed under 
   the GNU General Public License.

   See the README file in the top-level LAMMPS directory.
------------------------------------------------------------------------- */

#include "stdio.h"
#include "string.h"
#include "fix_nve.h"
#include "atom.h"
#include "force.h"
#include "update.h"
#include "respa.h"
#include "error.h"

#include <iostream.h>  // I/O                  ********* added by kris 
#include <fstream.h>   // file I/O             *********
#include <iomanip.h>   // format manipulation  *********

using namespace LAMMPS_NS;

/* ---------------------------------------------------------------------- */

FixNVE::FixNVE(LAMMPS *lmp, int narg, char **arg) :
  Fix(lmp, narg, arg)
{
  if (strcmp(style,"nve/sphere") != 0 && narg < 3)
    error->all("Illegal fix nve command");

  time_integrate = 1;
}

/* ---------------------------------------------------------------------- */

int FixNVE::setmask()
{
  int mask = 0;
  mask |= INITIAL_INTEGRATE;
  mask |= FINAL_INTEGRATE;
  mask |= INITIAL_INTEGRATE_RESPA;
  mask |= FINAL_INTEGRATE_RESPA;
  return mask;
}

/* ---------------------------------------------------------------------- */

void FixNVE::init()
{
  dtv = update->dt;
  dtf = 0.5 * update->dt * force->ftm2v;

  if (strcmp(update->integrate_style,"respa") == 0)
    step_respa = ((Respa *) update->integrate)->step;
}

/* ----------------------------------------------------------------------
   allow for both per-type and per-atom mass
------------------------------------------------------------------------- */

void FixNVE::initial_integrate(int vflag)
{
  double dtfm;

  double **x = atom->x;
  double **v = atom->v;
  double **f = atom->f;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;
  if (igroup == atom->firstgroup) nlocal = atom->nfirst;

  step_freq+=1; //********* update counter of dof/step # ******************************* by kris

  ofstream outdata; //******** added by kris

  //************ records orginal forces and positions and creates output file **************** by kris
  if (step_freq == 1) {  

    outdata.open("outputfile.plus_0K-initial.txt");   
    outdata<<"I'm printing!"<<endl<<"I'm printing!"<<endl<<"I'm printing!"<<endl; 
    outdata.close();

    for (int i = 0; i < nlocal; i++) {
      f_orig[i][0]=f[i][0];
      f_orig[i][1]=f[i][1];
      f_orig[i][2]=f[i][2];
      x_orig[i][0]=x[i][0];
      x_orig[i][1]=x[i][1];
      x_orig[i][2]=x[i][2];
    }
  }
  //********************************************************************************************

FILE *myoutputfile = fopen("outputfile.plus_0K-initial.txt", "a"); //****** opens output file so new data is appended automatically

  //*********************** calculate dof to alter ********************************************* by kris
  i_dof=(step_freq-1)/3;
  if (step_freq%3==0) j_dof=2; 
  if (step_freq%3==1) j_dof=0;
  if (step_freq%3==2) j_dof=1;
  fprintf(myoutputfile, "%d: %d %d %d \n", step_freq,i_dof,j_dof,nlocal);
  //********************************************************************************************

// if(type[i_dof]==2){
 fprintf(myoutputfile, "calculating for atom: %d, dof: %d \n",i_dof,j_dof);
  if (rmass) {
    for (int i = 0; i < nlocal; i++) {
      //if (type[i]==2){
      if (mask[i] & groupbit) {
	dtfm = dtf / rmass[i];
	v[i][0] = dtfm * f_orig[i][0]; //************ "+=" -> "=" so V(t=0) is always used ******** by kris
	v[i][1] = dtfm * f_orig[i][1]; //************ "+=" -> "=" so V(t=0) is always used ******** 
	v[i][2] = dtfm * f_orig[i][2]; //************ "+=" -> "=" so V(t=0) is always used ******** 
	x[i][0] = x_orig[i][0];  //****************** only 1 dof moves at a time ********************** by kris
	x[i][1] = x_orig[i][1];  //****************** only 1 dof moves at a time ********************** 
	x[i][2] = x_orig[i][2];  //****************** only 1 dof moves at a time ********************** 
      }
      //}
    }
    x[i_dof][j_dof] = x_orig[i_dof][j_dof]+1.0e-3; //********* moving the dof by unit increment **************** by kris
  } else {
    for (int i = 0; i < nlocal; i++) {
      if (mask[i] & groupbit) {

       //if(type[i]==2){ 
	dtfm = dtf / mass[type[i]];
	v[i][0] = 0.0; //dtfm * f_orig[i][0]; //************ "+=" -> "=" so V(t=0) is always used ******** by kris
	v[i][1] = 0.0; //dtfm * f_orig[i][1]; //************ "+=" -> "=" so V(t=0) is always used ********
	v[i][2] = 0.0; //dtfm * f_orig[i][2]; //************ "+=" -> "=" so V(t=0) is always used ******** 
	x[i][0] = x_orig[i][0];  //****************** only 1 dof moves at a time ********************** by kris
	x[i][1] = x_orig[i][1];  //****************** only 1 dof moves at a time **********************
	x[i][2] = x_orig[i][2];  //****************** only 1 dof moves at a time **********************
       //}

      }
    }
    x[i_dof][j_dof] = x_orig[i_dof][j_dof]+1.0e-3; //******** moving the dof by unit increment **************** by kris
  }
// }//this is the end of the if statement on line 113
 fclose(myoutputfile);
}//this is the end of initial integrate routine

/* ---------------------------------------------------------------------- */

void FixNVE::final_integrate()
{
  double dtfm;

  double **v = atom->v;
  double **f = atom->f;
  double *mass = atom->mass;
  double *rmass = atom->rmass;
  int *type = atom->type;
  int *mask = atom->mask;
  int nlocal = atom->nlocal;
  if (igroup == atom->firstgroup) nlocal = atom->nfirst;

  //********************** print forces as column vector ******************** by kris
// if(type[i_dof]==2){ // only atoms tagged will be recorded -kris

  ofstream force_out;
  if (step_freq == 1) {
    force_out.open("force_out_plus_0K-initial.txt");
    force_out.close();
  }
  kris_counter=0; 
  FILE *my_force_out = fopen("force_out_plus_0K-initial.txt", "a"); //****** opens output file so new data is appended automatically
  for (int i = 0; i < nlocal; i++) {

//   if(type[i]==2){  // only atoms tagged will be recorded -kris
    for (int j = 0; j < 3; j++) {
      f[i][j]=(f[i][j]-f_orig[i][j])/1.0e-3;   
//      kris_counter++;
//      fprintf(my_force_out,"%d,%d ",step_freq,kris_counter);      
      fprintf(my_force_out, "%12.12f  ", f[i][j]);
    }
//   }

  }
  fprintf(my_force_out, "\n");
  fclose(my_force_out);

  //*************************************************************************

  if (rmass) {
    for (int i = 0; i < nlocal; i++) {
      if (mask[i] & groupbit) {
	dtfm = dtf / rmass[i];
	v[i][0] += dtfm * f[i][0];
	v[i][1] += dtfm * f[i][1];
	v[i][2] += dtfm * f[i][2];
      }
    }

  } else {
    for (int i = 0; i < nlocal; i++) {
      if (mask[i] & groupbit) {
	dtfm = dtf / mass[type[i]];
	v[i][0] = 0.0; //+= dtfm * f[i][0];
	v[i][1] = 0.0; //+= dtfm * f[i][1];
	v[i][2] = 0.0; //+= dtfm * f[i][2];
      }
    }
  }    //not needed! -kris

// }//this is the end of the if statement about type 2 on line 163
}//this is the end of the final integrate routine

/* ---------------------------------------------------------------------- */

void FixNVE::initial_integrate_respa(int vflag, int ilevel, int flag)
{
  if (flag) return;             // only used by NPT,NPH

  dtv = step_respa[ilevel];
  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;

  // innermost level - NVE update of v and x
  // all other levels - NVE update of v

  if (ilevel == 0) initial_integrate(vflag);
  else final_integrate();
}

/* ---------------------------------------------------------------------- */

void FixNVE::final_integrate_respa(int ilevel)
{
  dtf = 0.5 * step_respa[ilevel] * force->ftm2v;
  final_integrate();
}

/* ---------------------------------------------------------------------- */

void FixNVE::reset_dt()
{
  dtv = update->dt;
  dtf = 0.5 * update->dt * force->ftm2v;
}
